service: step-fns-parallel

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}
  timeout: 20

functions:
  branch1:
    handler: sf.branch1
  branch2:
    handler: sf.branch2
  branch3:
    handler: sf.branch3
  afterBranches:
    handler: sf.afterBranches

stepFunctions:
  stateMachines:
    parallelBatchProcessing:
      name: parallelBatchProcessing
      definition:
        Comment: "Process batch with parallel tasks Branch2 and Branch3, we use a lambda for each of these tasks.
        As the processing of the whole batch may exceed the lambda timeout we asks on each lambda how much time left we have to continue processing,
        in the case there is little time left we relaunch the lambda with its Choice state to renew the timeout"
        StartAt: Parallel1
        States:
          Parallel1:
            Type: Parallel
            Branches:
              - StartAt: Branch1
                States:
                  Branch1:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [ branch1, Arn ]
                    TimeoutSeconds: ${self:provider.timeout}
                    End: true
              - StartAt: Branch2
                States:
                  Branch2:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [ branch2, Arn ]
                    TimeoutSeconds: ${self:provider.timeout}
                    Next: Branch2isDone
                  Branch2isDone:
                    Type: Choice
                    Choices:
                    - Variable: $.done
                      BooleanEquals: false
                      Next: Branch2
                    Default: Branch2end
                  Branch2end:
                    Type: Pass
                    End: true
              - StartAt: Branch3
                States:
                  Branch3:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [ branch3, Arn ]
                    TimeoutSeconds: ${self:provider.timeout}
                    Next: Branch3isDone
                  Branch3isDone:
                    Type: Choice
                    Choices:
                      - Variable: $.done
                        BooleanEquals: false
                        Next: Branch3
                    Default: Branch3end
                  Branch3end:
                    Type: Pass
                    End: true
            Next: AfterBranches
          AfterBranches:
            Type: Task
            Resource:
              Fn::GetAtt: [ afterBranches, Arn ]
            TimeoutSeconds: ${self:provider.timeout}
            End: true
